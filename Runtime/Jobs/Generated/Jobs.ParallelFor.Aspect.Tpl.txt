namespace ME.BECS.Jobs {
    
    using static Cuts;
    using Unity.Jobs;
    using Unity.Jobs.LowLevel.Unsafe;
    using Unity.Collections.LowLevel.Unsafe;
    using Unity.Burst;

    public static unsafe partial class QueryAspectParallelScheduleExtensions {
        
        public static JobHandle Schedule<T, {count(,)[T#i#]}>(this QueryBuilder builder, in T job = default) where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {count( )[where T#i# : unmanaged, IAspect]} {
            {count( )[builder.WithAspect<T#i#>();]}
            builder.builderDependsOn = builder.SetEntities(builder.commandBuffer, builder.builderDependsOn);
            builder.builderDependsOn = job.Schedule<T, {count(,)[T#i#]}>(in builder.commandBuffer, builder.parallelForBatch, builder.isUnsafe, builder.builderDependsOn);
            builder.builderDependsOn = builder.Dispose(builder.builderDependsOn);
            return builder.builderDependsOn;
        }
        
        public static JobHandle Schedule<T, {count(,)[T#i#]}>(this Query staticQuery, in T job, in SystemContext context) where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {count( )[where T#i# : unmanaged, IAspect]} {
            return staticQuery.Schedule<T, {count(,)[T#i#]}>(in job, in context.world, context.dependsOn);
        }
        
        public static JobHandle Schedule<T, {count(,)[T#i#]}>(this Query staticQuery, in T job, in World world, JobHandle dependsOn = default) where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {count( )[where T#i# : unmanaged, IAspect]} {
            var state = world.state;
            var query = API.MakeStaticQuery(QueryContext.Create(state, world.id), dependsOn).FromQueryData(state, world.id, state->queries.GetPtr(state, staticQuery.id));
            return query.Schedule<T, {count(,)[T#i#]}>(in job);
        }

        public static JobHandle Schedule<T, {count(,)[T#i#]}>(this QueryBuilderDisposable staticQuery, in T job) where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {count( )[where T#i# : unmanaged, IAspect]} {
            staticQuery.builderDependsOn = job.Schedule<T, {count(,)[T#i#]}>(in staticQuery.commandBuffer, staticQuery.parallelForBatch, staticQuery.isUnsafe, staticQuery.builderDependsOn);
            staticQuery.builderDependsOn = staticQuery.Dispose(staticQuery.builderDependsOn);
            return staticQuery.builderDependsOn;
        }
        
    }

    public static partial class EarlyInit {
        public static void DoParallelForAspect<T, {count(,)[T#i#]}>()
                {count( )[where T#i# : unmanaged, IAspect]}
                where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> => JobParallelForAspectExtensions.JobEarlyInitialize<T, {count(,)[T#i#]}>();
    }

    [JobProducerType(typeof(JobParallelForAspectExtensions.JobProcess<{count[,]}>))]
    public interface IJobParallelForAspects<{count(,)[T#i#]}> : IJobParallelForAspectsBase {count( )[where T#i# : unmanaged, IAspect]} {
        void Execute(in JobInfo jobInfo, in Ent ent, {count(,)[{{inref}} T#i# c#i#]});
    }

    public static unsafe partial class JobParallelForAspectExtensions {
        
        public static void JobEarlyInitialize<T, {count(,)[T#i#]}>() {count( )[where T#i# : unmanaged, IAspect]} where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> => JobProcess<T, {count(,)[T#i#]}>.Initialize();
        
        private static System.IntPtr GetReflectionData<T, {count(,)[T#i#]}>() {count( )[where T#i# : unmanaged, IAspect]} where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {
            JobProcess<T, {count(,)[T#i#]}>.Initialize();
            System.IntPtr reflectionData = JobProcessData<T, {count(,)[T#i#]}>.jobReflectionData.Data;
            return reflectionData;
        }

        #if ENABLE_UNITY_COLLECTIONS_CHECKS && ENABLE_BECS_COLLECTIONS_CHECKS
        private static System.IntPtr GetReflectionUnsafeData<T, {count(,)[T#i#]}>() {count( )[where T#i# : unmanaged, IAspect]} where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {
            JobProcess<T, {count(,)[T#i#]}>.Initialize();
            System.IntPtr reflectionData = JobProcessUnsafeData<T, {count(,)[T#i#]}>.jobReflectionData.Data;
            return reflectionData;
        }
        #endif

        public static JobHandle Schedule<T, {count(,)[T#i#]}>(this T jobData, in CommandBuffer* buffer, uint innerLoopBatchCount, bool unsafeMode, JobHandle dependsOn = default)
            {count( )[where T#i# : unmanaged, IAspect]}
            where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {
            
            buffer->sync = false;
            void* data = null;
            #if ENABLE_UNITY_COLLECTIONS_CHECKS && ENABLE_BECS_COLLECTIONS_CHECKS
            data = CompiledJobs<T>.Get(ref jobData, buffer, unsafeMode);
            var parameters = new JobsUtility.JobScheduleParameters(data, unsafeMode == true ? GetReflectionUnsafeData<T, {count(,)[T#i#]}>() : GetReflectionData<T, {count(,)[T#i#]}>(), dependsOn, ScheduleMode.Parallel);
            #else
            var dataVal = new JobData<T, {count(,)[T#i#]}>() {
                jobData = jobData,
                buffer = buffer,
                {count[c#i# = buffer->state->aspectsStorage.Initialize<T#i#>(buffer->state),]}
            };
            data = _address(ref dataVal);
            var parameters = new JobsUtility.JobScheduleParameters(data, GetReflectionData<T, {count(,)[T#i#]}>(), dependsOn, ScheduleMode.Parallel);
            #endif
            
            return JobsUtility.ScheduleParallelForDeferArraySize(ref parameters, (int)innerLoopBatchCount, (byte*)buffer, null);

        }

        private struct JobData<T, {count(,)[T#i#]}>
            {count( )[where T#i# : unmanaged, IAspect]}
            where T : struct {
            [NativeDisableUnsafePtrRestriction]
            public T jobData;
            [NativeDisableUnsafePtrRestriction]
            public CommandBuffer* buffer;
            {count[public T#i# c#i#;]}
        }

        internal struct JobProcessData<T, {count(,)[T#i#]}> {
            internal static readonly Unity.Burst.SharedStatic<System.IntPtr> jobReflectionData = Unity.Burst.SharedStatic<System.IntPtr>.GetOrCreate<JobProcessData<T, {count(,)[T#i#]}>>();
        }

        #if ENABLE_UNITY_COLLECTIONS_CHECKS && ENABLE_BECS_COLLECTIONS_CHECKS
        internal struct JobProcessUnsafeData<T, {count(,)[T#i#]}> {
            internal static readonly Unity.Burst.SharedStatic<System.IntPtr> jobReflectionData = Unity.Burst.SharedStatic<System.IntPtr>.GetOrCreate<JobProcessUnsafeData<T, {count(,)[T#i#]}>>();
        }
        #endif

        internal struct JobProcess<T, {count(,)[T#i#]}>
            {count( )[where T#i# : unmanaged, IAspect]}
            where T : struct, IJobParallelForAspects<{count(,)[T#i#]}> {

            [BurstDiscard]
            public static void Initialize() {
                if (JobProcessData<T, {count(,)[T#i#]}>.jobReflectionData.Data == System.IntPtr.Zero) {
                    #if ENABLE_UNITY_COLLECTIONS_CHECKS && ENABLE_BECS_COLLECTIONS_CHECKS
                    JobProcessData<T, {count(,)[T#i#]}>.jobReflectionData.Data = JobsUtility.CreateJobReflectionData(CompiledJobs<T>.GetJobType(false), typeof(T), (ExecuteJobFunction)Execute);
                    JobProcessUnsafeData<T, {count(,)[T#i#]}>.jobReflectionData.Data = JobsUtility.CreateJobReflectionData(CompiledJobs<T>.GetJobType(true), typeof(T), (ExecuteJobFunction)Execute);
                    #else
                    JobProcessData<T, {count(,)[T#i#]}>.jobReflectionData.Data = JobsUtility.CreateJobReflectionData(typeof(JobData<T, {count(,)[T#i#]}>), typeof(T), (ExecuteJobFunction)Execute);
                    #endif
                }
            }

            private delegate void ExecuteJobFunction(ref JobData<T, {count(,)[T#i#]}> jobData, System.IntPtr bufferPtr, System.IntPtr bufferRangePatchData, ref JobRanges ranges, int jobIndex);

            private static void Execute(ref JobData<T, {count(,)[T#i#]}> jobData, System.IntPtr bufferPtr, System.IntPtr bufferRangePatchData, ref JobRanges ranges, int jobIndex) {

                var jobInfo = JobInfo.Create(jobData.buffer->worldId);
                jobInfo.count = jobData.buffer->count;
                {count[var aspect#i# = jobData.c#i#;]}
                while (JobsUtility.GetWorkStealingRange(ref ranges, jobIndex, out var begin, out var end) == true) {
                    
                    jobData.buffer->BeginForEachRange((uint)begin, (uint)end);
                    for (uint i = (uint)begin; i < end; ++i) {
                        jobInfo.index = i;
                        var entId = *(jobData.buffer->entities + i);
                        var gen = Ents.GetGeneration(jobData.buffer->state, entId);
                        var ent = new Ent(entId, gen, jobData.buffer->worldId);
                        {count[aspect#i#.ent = ent;]}
                        jobData.jobData.Execute(in jobInfo, in ent, {count(,)[{{inref}} aspect#i#]});
                    }
                    jobData.buffer->EndForEachRange();
                    
                }

            }
        }
    }
    
}